name: Release and Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run tests
      run: |
        pytest

    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          ## Changes in ${{ steps.tag.outputs.tag }}
          
          ### Features
          - Automatically scan codebase for TODO comments
          - Create GitHub issues with links to source code
          - Prevent duplicate issues with content-based hashing
          - Support for custom ignore patterns and directories
          - Works as both GitHub Action and standalone CLI tool
          
          ### Usage
          ```yaml
          - uses: jjasghar/github-action-todo-tracker@${{ steps.tag.outputs.tag }}
            with:
              github-token: ${{ '${{ secrets.GITHUB_TOKEN }}' }}
              close-resolved: true
          ```
          
          See the [README](https://github.com/jjasghar/github-action-todo-tracker/blob/main/README.md) for full documentation.
        draft: false
        prerelease: false

    - name: Update major version tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        MAJOR_VERSION=$(echo $TAG_NAME | cut -d. -f1)
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -f $MAJOR_VERSION
        git push origin $MAJOR_VERSION --force
